
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###########################################################
> ## Aim : Checking running estimates of ABM, stupid method 
> ##       and variance estimator
> ##########################################################
> 
> set.seed(666)
> library(mcmcse)
mcmcse: Monte Carlo Standard Errors for MCMC
Version 1.4-1 created on 2020-01-29.
copyright (c) 2012, James M. Flegal, University of California, Riverside
                    John Hughes, University of Colorado, Denver
                    Dootika Vats, University of Warwick
                    Ning Dai, University of Minnesota
 For citation information, type citation("mcmcse").
 Type help("mcmcse-package") to get started.

> source("Gibbs_sampler.R")
> source("./../ABM.R")
> source("./../stupid.R")
> source("./../RBM.R")
> source("./../choosingBatch.R")
> 
> running_mvg <- function(mu1, mu2, A, B, rho, n, m, rep, plot_step)
+ {
+     print(rho)
+     if (rho == 0.5) 
+         method = 'sqroot'
+     if (rho == 0.95)
+         method = 'sqroot'
+     if (rho == 0.999)
+         method = 'smart'
+ 
+     X <- array(, dim = c(m, n, 2))
+     starting_buffer <- 0
+ 
+     starting <- matrix(0, nrow = m, ncol = 2)
+     starting[, 1] <- seq(mu1 - 3 * A, mu1 + 3 * A, length = m)
+     starting[, 2] <- seq(mu2 - 3 * B, mu2 + 3 * B, length = m)
+ 
+     plot_mat_abm <- matrix(, nrow = rep, ncol = 5 * floor((n - starting_buffer) / plot_step))
+     plot_mat_sm <- matrix(, nrow = rep, ncol = 5 * floor((n - starting_buffer) / plot_step))
+     plot_mat_rbm <- matrix(, nrow = rep, ncol = 5 * floor((n - starting_buffer) / plot_step))
+     
+     starting <- matrix(0, nrow = m, ncol = 2)
+     starting[, 1] <- seq(mu1 - 3 * A, mu1 + 3 * A, length = m)
+     starting[, 2] <- seq(mu2 - 3 * B, mu2 + 3 * B, length = m)
+     print(n+m)
+     for (j in 1:rep) {
+ 
+         if ((j %% (rep/10)) == 0) {
+             print(j)
+         }
+ 
+         for (i in 1:m) { 
+             init <-  starting[i, ] 
+             X[i,,] <- Gibbs_sampler(mu1, mu2, A, B, rho, init, n)
+         }
+         
+         for (i in (1:floor((n - starting_buffer) / plot_step))) {
+             b <- chooseBatch(X[, 1:(starting_buffer + plot_step * i),], r, method)
+             #if (b == sqrt(starting_buffer + plot_step * i))
+                 #print('sqrt')
+             abm <- ABM(X[, 1:(starting_buffer + plot_step * i),], m, starting_buffer + plot_step * i, r, b)
+             sm <- SM(X[, 1:(starting_buffer + plot_step * i),], m, starting_buffer + plot_step * i)
+             rbm <- RBM(X[, 1:(starting_buffer + plot_step * i),], m, starting_buffer + plot_step * i, r, c, b)
+ 
+             plot_mat_abm[j, ((i - 1) * 5 + 1):(i * 5)] = c(abm[1, 1], abm[2, 2], abm[1, 2], det(abm), norm(abm, type = "F"))
+             plot_mat_sm[j, ((i - 1) * 5 + 1):(i * 5)] = c(sm[1, 1], sm[2, 2], sm[1, 2], det(sm), norm(sm, type = "F"))
+             plot_mat_rbm[j, ((i - 1) * 5 + 1):(i * 5)] = c(rbm[1, 1], rbm[2, 2], rbm[1, 2], det(rbm), norm(rbm, type = "F"))
+         }
+ 
+     }
+     filename = paste("running", "rho", rho, "m", m, "n", n, ".Rdata", sep = "_")
+     save(plot_mat_abm, plot_mat_sm, plot_mat_rbm, file = paste("output_files", filename, sep = "/"))
+ }
> 
> 
> mu1 <- 2
> mu2 <- 50
> A <- 1
> B <- 1
> n <- 1e4
> rep <- 1e2
> m_ <- c(10)
> r <- 3
> c <- 1/2
> plot_step <- 50
> p <- 2
> alpha <- 0.05
> 
> 
> 
> for (iter1 in 1:length(m_)) {
+     m <- m_[iter1]
+     running_mvg(mu1, mu2, A, B, rho = .5, n, m, rep, plot_step = plot_step)
+     #running_mvg(mu1, mu2, A, B, rho = .95, n, m, rep, plot_step = plot_step)
+     running_mvg(mu1, mu2, A, B, rho = .999, n, m, rep, plot_step = plot_step)
+ 
+ }
[1] 0.5
[1] 10010
[1] 10
[1] 20
[1] 30
[1] 40
[1] 50
[1] 60
[1] 70
[1] 80
[1] 90
[1] 100
[1] 0.999
[1] 10010
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] 10
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting RBM"
[1] "adjusting RBM"
[1] 20
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] 30
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] 40
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting RBM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] 50
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting RBM"
[1] "adjusting RBM"
[1] "adjusting RBM"
[1] "adjusting RBM"
[1] "adjusting RBM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting RBM"
[1] "adjusting RBM"
[1] "adjusting RBM"
[1] "adjusting RBM"
[1] 60
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] 70
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting RBM"
[1] 80
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting RBM"
[1] "adjusting RBM"
[1] "adjusting RBM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] 90
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting ABM"
[1] "adjusting RBM"
[1] "adjusting ABM"
[1] 100
[1] "adjusting ABM"
> 
> 
> 
> proc.time()
    user   system  elapsed 
1717.015   53.280 1791.886 
